package keeper_test

import (
	"testing"

	keepertest "github.com/Zenrock-Foundation/zrchain/v6/testutil/keeper"
	"github.com/stretchr/testify/require"
	"github.com/zenrocklabs/zenbtc/x/zenbtc/keeper"
	"github.com/zenrocklabs/zenbtc/x/zenbtc/types"
)

func TestMsgServerSubmitUnsignedRedemptionTx(t *testing.T) {

	type args struct {
		msg *types.MsgSubmitUnsignedRedemptionTx
	}
	tests := []struct {
		name    string
		args    args
		want    *types.MsgSubmitUnsignedRedemptionTxResponse
		wantErr bool
	}{
		{
			name: "valid redemption tx",
			args: args{
				msg: &types.MsgSubmitUnsignedRedemptionTx{
					Creator: "zen13y3tm68gmu9kntcxwvmue82p6akacnpt2v7nty",
					CacheId: []byte("cacheId"),
					Inputs: []*types.InputHashes{
						{
							Keyid: 1,
							Hash:  "0x1234567890",
						},
					},
					Txbytes:           []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x4c, 0x24, 0x11, 0x80, 0x3b, 0x94, 0xb7, 0xb3, 0x4e, 0x32, 0x1f, 0xdd, 0xba, 0xbb, 0xd1, 0x6d, 0x31, 0x18, 0xd7, 0xa6, 0x36, 0x13, 0xca, 0x52, 0x07, 0x93, 0x21, 0xad, 0xc5, 0x77, 0xc7, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x88, 0x96, 0xde, 0x26, 0x18, 0x47, 0xfe, 0xbc, 0x61, 0x45, 0x07, 0x01, 0x8b, 0xcd, 0x4f, 0xae, 0x1f, 0x79, 0x7c, 0x39, 0x11, 0xf4, 0xcc, 0xd6, 0xd5, 0x51, 0x83, 0xbf, 0x2e, 0xca, 0x2b, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xed, 0x69, 0x5d, 0x61, 0x57, 0xe7, 0x94, 0xd3, 0x7d, 0xf6, 0xf1, 0x6e, 0xa0, 0xcb, 0x05, 0x08, 0x03, 0x9d, 0x81, 0xac, 0x58, 0x74, 0x70, 0x71, 0xa1, 0x2d, 0x92, 0xaf, 0x69, 0x1a, 0x7b, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x46, 0xea, 0x1c, 0x84, 0xe6, 0x1a, 0x53, 0x2c, 0xfc, 0xe6, 0xf0, 0x95, 0x7d, 0x72, 0xd8, 0xe5, 0x22, 0x2e, 0xf2, 0x8f, 0xc2, 0xf5, 0x5d, 0x03, 0xe2, 0xf7, 0x22, 0xce, 0xae, 0xcb, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xd9, 0x71, 0xfb, 0xf8, 0x9f, 0x9e, 0x2e, 0x4d, 0xaf, 0x32, 0x19, 0xd2, 0xaf, 0xf0, 0xf3, 0x9c, 0x02, 0x9f, 0x9a, 0xb8, 0xab, 0x09, 0x53, 0xd1, 0xc0, 0x9a, 0xe0, 0xa7, 0xad, 0xcd, 0x5e, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x02, 0xca, 0xed, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14, 0x06, 0x11, 0xc7, 0xb4, 0x2a, 0x39, 0x43, 0x5c, 0xbd, 0x20, 0x08, 0x9e, 0x34, 0x26, 0xfb, 0x6f, 0x6e, 0x37, 0xf3, 0x6f, 0x80, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x14, 0x30, 0xe8, 0x5a, 0x69, 0x04, 0x0c, 0xf0, 0x64, 0x04, 0x2f, 0x5a, 0xcf, 0xb5, 0x49, 0x3b, 0xff, 0xa4, 0xbe, 0xd6, 0x5b, 0x02, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00, 0x9c, 0x97, 0x87, 0xcf, 0x03, 0x00, 0xee, 0x7a, 0xd1, 0xf8, 0xc8, 0xba, 0x5a, 0xd8, 0x0a, 0x67, 0xfa, 0xdd, 0x42, 0x4a, 0x5c, 0x6d, 0x8e, 0xfa, 0x7c, 0xf8, 0x39, 0xea, 0xb9, 0x1f, 0xe0, 0x0b, 0x02, 0x20, 0x63, 0x33, 0x70, 0xe9, 0xf2, 0xfb, 0x57, 0x57, 0x21, 0xb1, 0x2e, 0x61, 0x71, 0x0d, 0x51, 0x6d, 0xd1, 0x59, 0x75, 0xf8, 0x2c, 0xa9, 0xb0, 0xe0, 0x01, 0xa5, 0x26, 0x26, 0x07, 0x37, 0x7a, 0x70, 0x01, 0x21, 0x02, 0xe5, 0x29, 0xb4, 0x89, 0x0a, 0xab, 0xe3, 0xbf, 0x9b, 0x8d, 0x33, 0x8e, 0x4b, 0xad, 0x8d, 0x33, 0x32, 0x51, 0x20, 0x75, 0x40, 0x93, 0x37, 0x09, 0xa2, 0xd8, 0xf4, 0xa3, 0xf6, 0x04, 0x3c, 0x0d, 0x02, 0x47, 0x30, 0x44, 0x02, 0x20, 0x6e, 0xad, 0x1c, 0x71, 0x69, 0x99, 0x09, 0x37, 0x4d, 0xa4, 0x1c, 0x6b, 0xce, 0xb3, 0xf7, 0x6c, 0xf5, 0x7b, 0xdf, 0xf1, 0xe0, 0xba, 0x74, 0x57, 0xc5, 0xb6, 0x68, 0xf1, 0x43, 0x48, 0x51, 0x69, 0x02, 0x20, 0x16, 0x00, 0x71, 0x42, 0x3e, 0x86, 0xe1, 0x8a, 0xfc, 0xec, 0xdb, 0x83, 0xef, 0xec, 0xaa, 0xf9, 0xfb, 0xb2, 0x8b, 0x4f, 0xd0, 0x34, 0x32, 0xe6, 0x17, 0x72, 0xa8, 0xc7, 0xf5, 0x11, 0x24, 0x48, 0x01, 0x21, 0x03, 0xe6, 0xd3, 0xb7, 0x4a, 0xe6, 0xa9, 0x1c, 0x86, 0x78, 0x5b, 0x20, 0xbf, 0xeb, 0xd1, 0xba, 0xff, 0x2c, 0xf8, 0x28, 0xe3, 0xe2, 0xe1, 0x19, 0x3e, 0x48, 0xe4, 0xda, 0x8e, 0xce, 0xfd, 0x9d, 0x31, 0x02, 0x47, 0x30, 0x44, 0x02, 0x20, 0x5a, 0xb7, 0x5e, 0x3c, 0xa3, 0x32, 0x34, 0x91, 0x2f, 0xa3, 0xff, 0x35, 0xdf, 0xd3, 0x5b, 0xe3, 0x3f, 0x10, 0x51, 0xa4, 0x4b, 0xb6, 0x91, 0xdd, 0xe6, 0x7f, 0x63, 0x9a, 0x08, 0xae, 0x7d, 0x29, 0x02, 0x20, 0x2a, 0x26, 0x1b, 0xa5, 0xf4, 0x28, 0x5e, 0x3f, 0xbe, 0xf9, 0xa9, 0x4d, 0x26, 0xa6, 0xcd, 0xea, 0x7e, 0xa6, 0x97, 0x75, 0x12, 0x7f, 0x26, 0xf4, 0x7a, 0x9c, 0x93, 0x49, 0xc5, 0xac, 0x7c, 0xad, 0x01, 0x21, 0x02, 0x24, 0xd2, 0xe9, 0xc7, 0x77, 0xd8, 0xd3, 0x08, 0xd6, 0x3e, 0x1a, 0xf7, 0xdf, 0xc3, 0x47, 0xac, 0xf4, 0x48, 0x70, 0x26, 0x8b, 0xf7, 0xa3, 0xa5, 0x64, 0x48, 0xdd, 0x6b, 0xf8, 0xcb, 0xf5, 0x22, 0x02, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00, 0xfd, 0x27, 0xb3, 0x1f, 0x22, 0xe0, 0x56, 0x1d, 0x71, 0x6d, 0x88, 0xa5, 0xdb, 0x5c, 0x8e, 0x49, 0xc7, 0xdb, 0xf9, 0xfd, 0xc1, 0x18, 0x6b, 0x5a, 0x98, 0xda, 0x6f, 0xec, 0x0c, 0xea, 0x7b, 0xcd, 0x02, 0x20, 0x45, 0xa0, 0xf2, 0x49, 0xb2, 0xcf, 0x07, 0x03, 0xc4, 0x34, 0x57, 0x7f, 0x8e, 0xde, 0xdf, 0x64, 0xec, 0xd3, 0xde, 0x84, 0xb1, 0x37, 0x61, 0xb3, 0xf2, 0x54, 0x4a, 0x67, 0x33, 0x06, 0xf1, 0xd6, 0x01, 0x21, 0x03, 0xa4, 0xaf, 0xcd, 0x45, 0xd2, 0xc9, 0xfc, 0x80, 0x0d, 0x40, 0x82, 0xeb, 0xd0, 0x77, 0xfb, 0x69, 0x21, 0xc5, 0xb3, 0xc3, 0x6b, 0x40, 0x64, 0xb5, 0xfc, 0x24, 0x33, 0xa7, 0x94, 0x4c, 0x13, 0x4b, 0x02, 0x47, 0x30, 0x44, 0x02, 0x20, 0x7a, 0x5e, 0x30, 0xf0, 0xf4, 0x71, 0x8f, 0x6d, 0x24, 0xaf, 0x79, 0xa4, 0x22, 0xc5, 0x30, 0xe1, 0x9a, 0x5b, 0xde, 0xb6, 0xa1, 0x73, 0xfd, 0x88, 0xe0, 0xc1, 0xae, 0xee, 0xee, 0x61, 0xcb, 0xdf, 0x02, 0x20, 0x6d, 0x04, 0x4a, 0x68, 0x0d, 0xa8, 0xdd, 0x31, 0xe9, 0x71, 0x54, 0xe9, 0x46, 0xd2, 0xad, 0x28, 0xb7, 0x89, 0x89, 0x81, 0xba, 0x9c, 0xad, 0xe7, 0x18, 0xc7, 0xd6, 0xf0, 0x4d, 0xe0, 0x09, 0xeb, 0x01, 0x21, 0x02, 0x23, 0x4f, 0x70, 0x66, 0x80, 0xb3, 0xf8, 0xd8, 0xa2, 0x77, 0x92, 0x35, 0xec, 0x37, 0x4f, 0x28, 0x31, 0x3a, 0xc6, 0xca, 0xff, 0x25, 0x6c, 0x37, 0xe1, 0x17, 0x4c, 0x73, 0xc2, 0x89, 0x55, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00},
					ChainName:         "testnet",
					RedemptionIndexes: []uint64{2},
				},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			k, ctx := keepertest.ZenbtcKeeper(t)
			msgServer := keeper.NewMsgServerImpl(k)

			got, err := msgServer.SubmitUnsignedRedemptionTx(ctx, tt.args.msg)
			if (err != nil) != tt.wantErr {
				t.Errorf("MsgServer.SubmitUnsignedRedemptionTx() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !tt.wantErr {
				require.NotNil(t, got)
			}
		})
	}

}

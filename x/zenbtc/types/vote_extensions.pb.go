// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/zenbtc/vote_extensions.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Network is the network that the redemption request originated from.
type Network int32

const (
	Network_ETHEREUM Network = 0
	Network_SOLANA   Network = 1
)

var Network_name = map[int32]string{
	0: "ETHEREUM",
	1: "SOLANA",
}

var Network_value = map[string]int32{
	"ETHEREUM": 0,
	"SOLANA":   1,
}

func (x Network) String() string {
	return proto.EnumName(Network_name, int32(x))
}

func (Network) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8a675b627658547b, []int{0}
}

// Redemption is the metadata for a redemption transaction.
type Redemption struct {
	RecipientAddress string  `protobuf:"bytes,1,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Amount           uint64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	OriginChain      Network `protobuf:"varint,3,opt,name=origin_chain,json=originChain,proto3,enum=zrchain.zenbtc.Network" json:"origin_chain,omitempty"`
	BlockHeight      uint64  `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxIndex          uint64  `protobuf:"varint,5,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *Redemption) Reset()         { *m = Redemption{} }
func (m *Redemption) String() string { return proto.CompactTextString(m) }
func (*Redemption) ProtoMessage()    {}
func (*Redemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a675b627658547b, []int{0}
}
func (m *Redemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redemption.Merge(m, src)
}
func (m *Redemption) XXX_Size() int {
	return m.Size()
}
func (m *Redemption) XXX_DiscardUnknown() {
	xxx_messageInfo_Redemption.DiscardUnknown(m)
}

var xxx_messageInfo_Redemption proto.InternalMessageInfo

func (m *Redemption) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *Redemption) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Redemption) GetOriginChain() Network {
	if m != nil {
		return m.OriginChain
	}
	return Network_ETHEREUM
}

func (m *Redemption) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Redemption) GetTxIndex() uint64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

// Redemptions is a collection of redemption transactions.
type Redemptions struct {
	Redemptions []*Redemption `protobuf:"bytes,1,rep,name=redemptions,proto3" json:"redemptions,omitempty"`
}

func (m *Redemptions) Reset()         { *m = Redemptions{} }
func (m *Redemptions) String() string { return proto.CompactTextString(m) }
func (*Redemptions) ProtoMessage()    {}
func (*Redemptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a675b627658547b, []int{1}
}
func (m *Redemptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redemptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redemptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redemptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redemptions.Merge(m, src)
}
func (m *Redemptions) XXX_Size() int {
	return m.Size()
}
func (m *Redemptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Redemptions.DiscardUnknown(m)
}

var xxx_messageInfo_Redemptions proto.InternalMessageInfo

func (m *Redemptions) GetRedemptions() []*Redemption {
	if m != nil {
		return m.Redemptions
	}
	return nil
}

func init() {
	proto.RegisterEnum("zrchain.zenbtc.Network", Network_name, Network_value)
	proto.RegisterType((*Redemption)(nil), "zrchain.zenbtc.Redemption")
	proto.RegisterType((*Redemptions)(nil), "zrchain.zenbtc.Redemptions")
}

func init() {
	proto.RegisterFile("zrchain/zenbtc/vote_extensions.proto", fileDescriptor_8a675b627658547b)
}

var fileDescriptor_8a675b627658547b = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4f, 0xc2, 0x30,
	0x18, 0xc6, 0x57, 0x41, 0xc0, 0x77, 0x84, 0x60, 0x0f, 0x3a, 0x3d, 0x2c, 0x13, 0x3d, 0x2c, 0x6a,
	0x46, 0x82, 0x37, 0xe3, 0x05, 0x0d, 0x06, 0xa3, 0x62, 0x32, 0xf5, 0xe2, 0x65, 0xd9, 0x9f, 0x86,
	0x35, 0x40, 0xbb, 0xb4, 0x45, 0x27, 0x9f, 0xc2, 0x8f, 0x65, 0xe2, 0x85, 0xa3, 0x47, 0x03, 0x5f,
	0xc4, 0x30, 0x40, 0xd4, 0x5b, 0x9f, 0xe7, 0xf9, 0xb5, 0xef, 0xdb, 0x3c, 0x70, 0x30, 0x12, 0x61,
	0xec, 0x53, 0x56, 0x1f, 0x11, 0x16, 0xa8, 0xb0, 0xfe, 0xcc, 0x15, 0xf1, 0x48, 0xaa, 0x08, 0x93,
	0x94, 0x33, 0xe9, 0x24, 0x82, 0x2b, 0x8e, 0x2b, 0x0b, 0xca, 0x99, 0x53, 0xb5, 0x0f, 0x04, 0xe0,
	0x92, 0x88, 0x0c, 0x12, 0x45, 0x39, 0xc3, 0x47, 0xb0, 0x29, 0x48, 0x48, 0x13, 0x4a, 0x98, 0xf2,
	0xfc, 0x28, 0x12, 0x44, 0x4a, 0x03, 0x59, 0xc8, 0xde, 0x70, 0xab, 0x3f, 0x41, 0x73, 0xee, 0xe3,
	0x2d, 0x28, 0xf8, 0x03, 0x3e, 0x64, 0xca, 0x58, 0xb3, 0x90, 0x9d, 0x77, 0x17, 0x0a, 0x9f, 0x42,
	0x99, 0x0b, 0xda, 0xa5, 0xcc, 0xcb, 0x46, 0x19, 0x39, 0x0b, 0xd9, 0x95, 0xc6, 0xb6, 0xf3, 0x77,
	0xb4, 0xd3, 0x21, 0xea, 0x85, 0x8b, 0x9e, 0xab, 0xcf, 0xe1, 0x8b, 0x59, 0x86, 0xf7, 0xa0, 0x1c,
	0xf4, 0x79, 0xd8, 0xf3, 0x62, 0x42, 0xbb, 0xb1, 0x32, 0xf2, 0xd9, 0xcb, 0x7a, 0xe6, 0xb5, 0x33,
	0x0b, 0xef, 0x40, 0x49, 0xa5, 0x1e, 0x65, 0x11, 0x49, 0x8d, 0xf5, 0x2c, 0x2e, 0xaa, 0xf4, 0x6a,
	0x26, 0x6b, 0xd7, 0xa0, 0xaf, 0x3e, 0x23, 0xf1, 0x19, 0xe8, 0x62, 0x25, 0x0d, 0x64, 0xe5, 0x6c,
	0xbd, 0xb1, 0xfb, 0x7f, 0x8f, 0xd5, 0x0d, 0xf7, 0x37, 0x7e, 0xb8, 0x0f, 0xc5, 0xc5, 0x8a, 0xb8,
	0x0c, 0xa5, 0xd6, 0x43, 0xbb, 0xe5, 0xb6, 0x1e, 0x6f, 0xab, 0x1a, 0x06, 0x28, 0xdc, 0xdf, 0xdd,
	0x34, 0x3b, 0xcd, 0x2a, 0x3a, 0xbf, 0x7c, 0x9f, 0x98, 0x68, 0x3c, 0x31, 0xd1, 0xd7, 0xc4, 0x44,
	0x6f, 0x53, 0x53, 0x1b, 0x4f, 0x4d, 0xed, 0x73, 0x6a, 0x6a, 0x4f, 0xc7, 0x5d, 0xaa, 0xe2, 0x61,
	0xe0, 0x84, 0x7c, 0x30, 0xab, 0x44, 0xf0, 0xb0, 0xd7, 0xf7, 0x03, 0xb9, 0xac, 0x27, 0x5d, 0x1e,
	0xd4, 0x6b, 0x42, 0x64, 0x50, 0xc8, 0xea, 0x39, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x76, 0xd5,
	0xc8, 0x95, 0xc6, 0x01, 0x00, 0x00,
}

func (m *Redemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintVoteExtensions(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintVoteExtensions(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.OriginChain != 0 {
		i = encodeVarintVoteExtensions(dAtA, i, uint64(m.OriginChain))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintVoteExtensions(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintVoteExtensions(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Redemptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redemptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redemptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Redemptions) > 0 {
		for iNdEx := len(m.Redemptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Redemptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVoteExtensions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoteExtensions(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoteExtensions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Redemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovVoteExtensions(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovVoteExtensions(uint64(m.Amount))
	}
	if m.OriginChain != 0 {
		n += 1 + sovVoteExtensions(uint64(m.OriginChain))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovVoteExtensions(uint64(m.BlockHeight))
	}
	if m.TxIndex != 0 {
		n += 1 + sovVoteExtensions(uint64(m.TxIndex))
	}
	return n
}

func (m *Redemptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Redemptions) > 0 {
		for _, e := range m.Redemptions {
			l = e.Size()
			n += 1 + l + sovVoteExtensions(uint64(l))
		}
	}
	return n
}

func sovVoteExtensions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoteExtensions(x uint64) (n int) {
	return sovVoteExtensions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Redemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExtensions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			m.OriginChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginChain |= Network(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExtensions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Redemptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExtensions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redemptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redemptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redemptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redemptions = append(m.Redemptions, &Redemption{})
			if err := m.Redemptions[len(m.Redemptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExtensions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoteExtensions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoteExtensions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoteExtensions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoteExtensions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoteExtensions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoteExtensions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoteExtensions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoteExtensions = fmt.Errorf("proto: unexpected end of group")
)

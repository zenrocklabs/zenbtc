// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/zenbtc/mint.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NonceData struct {
	Nonce   uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Counter uint64 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Skip    bool   `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (m *NonceData) Reset()         { *m = NonceData{} }
func (m *NonceData) String() string { return proto.CompactTextString(m) }
func (*NonceData) ProtoMessage()    {}
func (*NonceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8855381be8e1a27d, []int{0}
}
func (m *NonceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonceData.Merge(m, src)
}
func (m *NonceData) XXX_Size() int {
	return m.Size()
}
func (m *NonceData) XXX_DiscardUnknown() {
	xxx_messageInfo_NonceData.DiscardUnknown(m)
}

var xxx_messageInfo_NonceData proto.InternalMessageInfo

func (m *NonceData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *NonceData) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *NonceData) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

type RequestedBitcoinHeaders struct {
	Heights []int64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (m *RequestedBitcoinHeaders) Reset()         { *m = RequestedBitcoinHeaders{} }
func (m *RequestedBitcoinHeaders) String() string { return proto.CompactTextString(m) }
func (*RequestedBitcoinHeaders) ProtoMessage()    {}
func (*RequestedBitcoinHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_8855381be8e1a27d, []int{1}
}
func (m *RequestedBitcoinHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestedBitcoinHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestedBitcoinHeaders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestedBitcoinHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestedBitcoinHeaders.Merge(m, src)
}
func (m *RequestedBitcoinHeaders) XXX_Size() int {
	return m.Size()
}
func (m *RequestedBitcoinHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestedBitcoinHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_RequestedBitcoinHeaders proto.InternalMessageInfo

func (m *RequestedBitcoinHeaders) GetHeights() []int64 {
	if m != nil {
		return m.Heights
	}
	return nil
}

func init() {
	proto.RegisterType((*NonceData)(nil), "zrchain.zenbtc.NonceData")
	proto.RegisterType((*RequestedBitcoinHeaders)(nil), "zrchain.zenbtc.RequestedBitcoinHeaders")
}

func init() { proto.RegisterFile("zrchain/zenbtc/mint.proto", fileDescriptor_8855381be8e1a27d) }

var fileDescriptor_8855381be8e1a27d = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x46, 0x63, 0x52, 0xfe, 0x3c, 0x30, 0x58, 0x48, 0x98, 0xc5, 0x8a, 0x3a, 0x65, 0x40, 0xe9,
	0xd0, 0x37, 0xa8, 0x10, 0x62, 0x02, 0xc9, 0x23, 0x9b, 0xed, 0x5e, 0xd5, 0x56, 0xa9, 0x1d, 0xec,
	0x1b, 0x09, 0xfa, 0x14, 0x3c, 0x16, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x08, 0x4a, 0x5a, 0x6f, 0xdf,
	0xb9, 0x47, 0xba, 0xd2, 0xa1, 0xf7, 0xfb, 0x68, 0xac, 0x72, 0x7e, 0xb1, 0x07, 0xaf, 0xd1, 0x2c,
	0x76, 0xce, 0x63, 0xd3, 0xc6, 0x80, 0x81, 0xdd, 0x9c, 0x54, 0x73, 0x54, 0xf3, 0x57, 0x7a, 0xfd,
	0x12, 0xbc, 0x81, 0x47, 0x85, 0x8a, 0xdd, 0xd2, 0x73, 0x3f, 0x02, 0x27, 0x15, 0xa9, 0x67, 0xf2,
	0x08, 0x8c, 0xd3, 0x4b, 0x13, 0x3a, 0x8f, 0x10, 0xf9, 0xd9, 0x74, 0xcf, 0xc8, 0x18, 0x9d, 0xa5,
	0xad, 0x6b, 0x79, 0x59, 0x91, 0xfa, 0x4a, 0x4e, 0x7b, 0xbe, 0xa4, 0x77, 0x12, 0x3e, 0x3a, 0x48,
	0x08, 0xeb, 0x95, 0x43, 0x13, 0x9c, 0x7f, 0x06, 0xb5, 0x86, 0x98, 0xc6, 0x47, 0x16, 0xdc, 0xc6,
	0x62, 0xe2, 0xa4, 0x2a, 0xeb, 0x52, 0x66, 0x5c, 0x3d, 0xfd, 0xf4, 0x82, 0x1c, 0x7a, 0x41, 0xfe,
	0x7a, 0x41, 0xbe, 0x07, 0x51, 0x1c, 0x06, 0x51, 0xfc, 0x0e, 0xa2, 0x78, 0x7b, 0xd8, 0x38, 0xb4,
	0x9d, 0x6e, 0x4c, 0xd8, 0x8d, 0x35, 0x31, 0x98, 0xed, 0xbb, 0xd2, 0x29, 0x97, 0x7d, 0xe6, 0x81,
	0x5f, 0x2d, 0x24, 0x7d, 0x31, 0x45, 0x2e, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xf7, 0x48,
	0xc2, 0x01, 0x01, 0x00, 0x00,
}

func (m *NonceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Skip {
		i--
		if m.Skip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Counter != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintMint(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestedBitcoinHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestedBitcoinHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestedBitcoinHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Heights) > 0 {
		dAtA2 := make([]byte, len(m.Heights)*10)
		var j1 int
		for _, num1 := range m.Heights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMint(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMint(dAtA []byte, offset int, v uint64) int {
	offset -= sovMint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NonceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMint(uint64(m.Nonce))
	}
	if m.Counter != 0 {
		n += 1 + sovMint(uint64(m.Counter))
	}
	if m.Skip {
		n += 2
	}
	return n
}

func (m *RequestedBitcoinHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Heights) > 0 {
		l = 0
		for _, e := range m.Heights {
			l += sovMint(uint64(e))
		}
		n += 1 + sovMint(uint64(l)) + l
	}
	return n
}

func sovMint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMint(x uint64) (n int) {
	return sovMint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NonceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skip = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestedBitcoinHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestedBitcoinHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestedBitcoinHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heights = append(m.Heights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMint
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMint
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Heights) == 0 {
					m.Heights = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heights = append(m.Heights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMint = fmt.Errorf("proto: unexpected end of group")
)

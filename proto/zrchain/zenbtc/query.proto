syntax = "proto3";

package zrchain.zenbtc;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "zrchain/zenbtc/params.proto";
import "zrchain/zenbtc/redemptions.proto";

option go_package = "github.com/zenrocklabs/zenbtc/x/zenbtc/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc GetParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/zenbtc/params";
  }

  // Queries a list of LockTransactions items.
  rpc LockTransactions(QueryLockTransactionsRequest) returns (QueryLockTransactionsResponse) {
    option (google.api.http).get = "/zenbtc/lock_transactions";
  }

  // Queries a list of Redemptions items.
  rpc Redemptions(QueryRedemptionsRequest) returns (QueryRedemptionsResponse) {
    option (google.api.http).get = "/zenbtc/redemptions";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryLockTransactionsRequest {}

message QueryLockTransactionsResponse {
  repeated string lock_transactions = 1;
}

message QueryRedemptionsRequest {
  uint64 start_index = 1;
  RedemptionStatus status = 2;
}

message QueryRedemptionsResponse {
  repeated Redemption redemptions = 1 [(gogoproto.nullable) = false];
}
